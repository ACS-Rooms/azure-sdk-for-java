// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.rooms.implementation;

import com.azure.communication.rooms.implementation.models.AddParticipantsRequest;
import com.azure.communication.rooms.implementation.models.CommunicationErrorResponseException;
import com.azure.communication.rooms.implementation.models.RemoveParticipantsRequest;
import com.azure.communication.rooms.implementation.models.RoomModel;
import com.azure.communication.rooms.implementation.models.UpdateParticipantsRequest;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in RoomsOperations. */
public final class RoomsOperationsImpl {
    /** The proxy service used to perform REST calls. */
    private final RoomsService service;

    /** The service client containing this operation class. */
    private final AzureCommunicationRoomServiceImpl client;

    /**
     * Initializes an instance of RoomsOperationsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    RoomsOperationsImpl(AzureCommunicationRoomServiceImpl client) {
        this.service = RestProxy.create(RoomsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureCommunicationRoomServiceRoomsOperations to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AzureCommunicationRo")
    private interface RoomsService {
        @Post("/rooms/{roomId}/participants/:add")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorResponseException.class,
                code = {400, 401, 403, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<RoomModel>> addParticipants(
                @HostParam("endpoint") String endpoint,
                @PathParam("roomId") String roomId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") AddParticipantsRequest addParticipantsRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/rooms/{roomId}/participants/:update")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorResponseException.class,
                code = {400, 401, 403, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<RoomModel>> updateParticipants(
                @HostParam("endpoint") String endpoint,
                @PathParam("roomId") String roomId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") UpdateParticipantsRequest updateParticipantsRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/rooms/{roomId}/participants/:remove")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorResponseException.class,
                code = {400, 401, 403, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<RoomModel>> removeParticipants(
                @HostParam("endpoint") String endpoint,
                @PathParam("roomId") String roomId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") RemoveParticipantsRequest removeParticipantsRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/rooms/{roomId}/participants")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorResponseException.class,
                code = {400, 401, 403, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<RoomModel>> getParticipants(
                @HostParam("endpoint") String endpoint,
                @PathParam("roomId") String roomId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * Adds participants to a room. If participants already exist, no change occurs.
     *
     * @param roomId The roomId parameter.
     * @param addParticipantsRequest Participants to be added to the room.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the meeting room along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RoomModel>> addParticipantsWithResponseAsync(
            String roomId, AddParticipantsRequest addParticipantsRequest) {
        final String accept = "application/json, text/json";
        return FluxUtil.withContext(
                context ->
                        service.addParticipants(
                                this.client.getEndpoint(),
                                roomId,
                                this.client.getApiVersion(),
                                addParticipantsRequest,
                                accept,
                                context));
    }

    /**
     * Adds participants to a room. If participants already exist, no change occurs.
     *
     * @param roomId The roomId parameter.
     * @param addParticipantsRequest Participants to be added to the room.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the meeting room along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RoomModel>> addParticipantsWithResponseAsync(
            String roomId, AddParticipantsRequest addParticipantsRequest, Context context) {
        final String accept = "application/json, text/json";
        return service.addParticipants(
                this.client.getEndpoint(),
                roomId,
                this.client.getApiVersion(),
                addParticipantsRequest,
                accept,
                context);
    }

    /**
     * Adds participants to a room. If participants already exist, no change occurs.
     *
     * @param roomId The roomId parameter.
     * @param addParticipantsRequest Participants to be added to the room.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the meeting room on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RoomModel> addParticipantsAsync(String roomId, AddParticipantsRequest addParticipantsRequest) {
        return addParticipantsWithResponseAsync(roomId, addParticipantsRequest)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Adds participants to a room. If participants already exist, no change occurs.
     *
     * @param roomId The roomId parameter.
     * @param addParticipantsRequest Participants to be added to the room.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the meeting room on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RoomModel> addParticipantsAsync(
            String roomId, AddParticipantsRequest addParticipantsRequest, Context context) {
        return addParticipantsWithResponseAsync(roomId, addParticipantsRequest, context)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Adds participants to a room. If participants already exist, no change occurs.
     *
     * @param roomId The roomId parameter.
     * @param addParticipantsRequest Participants to be added to the room.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the meeting room.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RoomModel addParticipants(String roomId, AddParticipantsRequest addParticipantsRequest) {
        return addParticipantsAsync(roomId, addParticipantsRequest).block();
    }

    /**
     * Adds participants to a room. If participants already exist, no change occurs.
     *
     * @param roomId The roomId parameter.
     * @param addParticipantsRequest Participants to be added to the room.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the meeting room along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RoomModel> addParticipantsWithResponse(
            String roomId, AddParticipantsRequest addParticipantsRequest, Context context) {
        return addParticipantsWithResponseAsync(roomId, addParticipantsRequest, context).block();
    }

    /**
     * Update participants in a room.
     *
     * @param roomId The roomId parameter.
     * @param updateParticipantsRequest Participants to be updated in a room.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the meeting room along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RoomModel>> updateParticipantsWithResponseAsync(
            String roomId, UpdateParticipantsRequest updateParticipantsRequest) {
        final String accept = "application/json, text/json";
        return FluxUtil.withContext(
                context ->
                        service.updateParticipants(
                                this.client.getEndpoint(),
                                roomId,
                                this.client.getApiVersion(),
                                updateParticipantsRequest,
                                accept,
                                context));
    }

    /**
     * Update participants in a room.
     *
     * @param roomId The roomId parameter.
     * @param updateParticipantsRequest Participants to be updated in a room.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the meeting room along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RoomModel>> updateParticipantsWithResponseAsync(
            String roomId, UpdateParticipantsRequest updateParticipantsRequest, Context context) {
        final String accept = "application/json, text/json";
        return service.updateParticipants(
                this.client.getEndpoint(),
                roomId,
                this.client.getApiVersion(),
                updateParticipantsRequest,
                accept,
                context);
    }

    /**
     * Update participants in a room.
     *
     * @param roomId The roomId parameter.
     * @param updateParticipantsRequest Participants to be updated in a room.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the meeting room on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RoomModel> updateParticipantsAsync(String roomId, UpdateParticipantsRequest updateParticipantsRequest) {
        return updateParticipantsWithResponseAsync(roomId, updateParticipantsRequest)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Update participants in a room.
     *
     * @param roomId The roomId parameter.
     * @param updateParticipantsRequest Participants to be updated in a room.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the meeting room on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RoomModel> updateParticipantsAsync(
            String roomId, UpdateParticipantsRequest updateParticipantsRequest, Context context) {
        return updateParticipantsWithResponseAsync(roomId, updateParticipantsRequest, context)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Update participants in a room.
     *
     * @param roomId The roomId parameter.
     * @param updateParticipantsRequest Participants to be updated in a room.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the meeting room.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RoomModel updateParticipants(String roomId, UpdateParticipantsRequest updateParticipantsRequest) {
        return updateParticipantsAsync(roomId, updateParticipantsRequest).block();
    }

    /**
     * Update participants in a room.
     *
     * @param roomId The roomId parameter.
     * @param updateParticipantsRequest Participants to be updated in a room.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the meeting room along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RoomModel> updateParticipantsWithResponse(
            String roomId, UpdateParticipantsRequest updateParticipantsRequest, Context context) {
        return updateParticipantsWithResponseAsync(roomId, updateParticipantsRequest, context).block();
    }

    /**
     * Remove participants from a room.
     *
     * @param roomId The roomId parameter.
     * @param removeParticipantsRequest Participants to be removed from the room.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the meeting room along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RoomModel>> removeParticipantsWithResponseAsync(
            String roomId, RemoveParticipantsRequest removeParticipantsRequest) {
        final String accept = "application/json, text/json";
        return FluxUtil.withContext(
                context ->
                        service.removeParticipants(
                                this.client.getEndpoint(),
                                roomId,
                                this.client.getApiVersion(),
                                removeParticipantsRequest,
                                accept,
                                context));
    }

    /**
     * Remove participants from a room.
     *
     * @param roomId The roomId parameter.
     * @param removeParticipantsRequest Participants to be removed from the room.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the meeting room along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RoomModel>> removeParticipantsWithResponseAsync(
            String roomId, RemoveParticipantsRequest removeParticipantsRequest, Context context) {
        final String accept = "application/json, text/json";
        return service.removeParticipants(
                this.client.getEndpoint(),
                roomId,
                this.client.getApiVersion(),
                removeParticipantsRequest,
                accept,
                context);
    }

    /**
     * Remove participants from a room.
     *
     * @param roomId The roomId parameter.
     * @param removeParticipantsRequest Participants to be removed from the room.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the meeting room on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RoomModel> removeParticipantsAsync(String roomId, RemoveParticipantsRequest removeParticipantsRequest) {
        return removeParticipantsWithResponseAsync(roomId, removeParticipantsRequest)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Remove participants from a room.
     *
     * @param roomId The roomId parameter.
     * @param removeParticipantsRequest Participants to be removed from the room.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the meeting room on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RoomModel> removeParticipantsAsync(
            String roomId, RemoveParticipantsRequest removeParticipantsRequest, Context context) {
        return removeParticipantsWithResponseAsync(roomId, removeParticipantsRequest, context)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Remove participants from a room.
     *
     * @param roomId The roomId parameter.
     * @param removeParticipantsRequest Participants to be removed from the room.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the meeting room.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RoomModel removeParticipants(String roomId, RemoveParticipantsRequest removeParticipantsRequest) {
        return removeParticipantsAsync(roomId, removeParticipantsRequest).block();
    }

    /**
     * Remove participants from a room.
     *
     * @param roomId The roomId parameter.
     * @param removeParticipantsRequest Participants to be removed from the room.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the meeting room along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RoomModel> removeParticipantsWithResponse(
            String roomId, RemoveParticipantsRequest removeParticipantsRequest, Context context) {
        return removeParticipantsWithResponseAsync(roomId, removeParticipantsRequest, context).block();
    }

    /**
     * Get participants in a room.
     *
     * @param roomId The roomId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants in a room along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RoomModel>> getParticipantsWithResponseAsync(String roomId) {
        final String accept = "application/json, text/json";
        return FluxUtil.withContext(
                context ->
                        service.getParticipants(
                                this.client.getEndpoint(), roomId, this.client.getApiVersion(), accept, context));
    }

    /**
     * Get participants in a room.
     *
     * @param roomId The roomId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants in a room along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RoomModel>> getParticipantsWithResponseAsync(String roomId, Context context) {
        final String accept = "application/json, text/json";
        return service.getParticipants(this.client.getEndpoint(), roomId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get participants in a room.
     *
     * @param roomId The roomId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants in a room on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RoomModel> getParticipantsAsync(String roomId) {
        return getParticipantsWithResponseAsync(roomId).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get participants in a room.
     *
     * @param roomId The roomId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants in a room on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RoomModel> getParticipantsAsync(String roomId, Context context) {
        return getParticipantsWithResponseAsync(roomId, context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get participants in a room.
     *
     * @param roomId The roomId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants in a room.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RoomModel getParticipants(String roomId) {
        return getParticipantsAsync(roomId).block();
    }

    /**
     * Get participants in a room.
     *
     * @param roomId The roomId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants in a room along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RoomModel> getParticipantsWithResponse(String roomId, Context context) {
        return getParticipantsWithResponseAsync(roomId, context).block();
    }
}
